#!/usr/bin/env ruby
require 'fileutils'

homekeeper = File.readlink(__FILE__) rescue File.expand_path(__FILE__)
base_dir = File.expand_path(File.join(File.dirname(homekeeper), '..'))

def print_usage
  puts 'Usage: homekeeper [command]'
  puts 'Examples:'
  puts '  homekeeper sync'
  puts '  homekeeper save'
  puts '  homekeeper link'
end

def sh(cmd)
  puts cmd
  %x[#{cmd}]
end

def branch
  sh('git status').split(/\n/)[0].
      split(/# On branch /)[1]
end

def commit
  sh('git show HEAD').split(/\n/)[0].
      split(/ /)[1]
end

if ARGV.empty?
  print_usage
  exit 0
end

case ARGV[0]
when 'sync'
  b = branch
  sh 'git fetch'
  sh 'git checkout master'
  sh 'git merge origin/master'
  sh "git checkout #{b}"
  sh 'git merge master'
when 'save'
  b = branch
  c = commit
  sh 'git checkout master'
  sh "git cherry-pick #{c}"
  sh "git checkout #{b}"
  sh 'git merge master'
when 'link'
  Dir.chdir base_dir do
    FileUtils.rm_r 'tmp' if File.exists? 'tmp'
    FileUtils.mkdir_p 'tmp/bin'
    FileUtils.mkdir_p 'tmp/dotfiles'

    puts 'Symlinking bin files'
    if File.exists? "#{ENV['HOME']}/bin"
      Dir["#{base_dir}/bin/*"].each do |f|
        original = "#{ENV['HOME']}/bin/#{File.basename(f)}".strip
        if File.exists? original
          FileUtils.cp_r original, 'tmp/bin'
          FileUtils.rm_rf original
        end
        FileUtils.ln_sf f, original
        puts "Symlinked: #{original}"
      end
    end

    puts 'Symlinking dot files'
    Dir["#{base_dir}/dotfiles/*"].each do |f|
      original = "#{ENV['HOME']}/.#{File.basename(f)}".strip
      if File.exists? original
        FileUtils.cp_r original, 'tmp/dotfiles'
        FileUtils.rm_rf original
      end
      FileUtils.ln_sf f, original
      puts "Symlinked: #{original}"
    end

    puts 'Removing broken symlinks'
    (Dir["#{ENV['HOME']}/.*"] + Dir["#{ENV['HOME']}/bin/*"]).each do |f|
      unless File.exists? f
        puts "Removing #{f} which points to #{File.readlink f}"
        FileUtils.rm f
      end
    end

    puts "Done"
  end
else
  print_usage
end
